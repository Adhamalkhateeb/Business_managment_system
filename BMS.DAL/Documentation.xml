<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BMS.DAL</name>
    </assembly>
    <members>
        <member name="T:DAL.DepartmentRepository">
            <summary>
            Repository for managing Department-related database operations.
            </summary>
        </member>
        <member name="M:DAL.DepartmentRepository.#ctor(BMS.InfraStructure.InfraStructure.interfaces.IStoredProcedureRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:DAL.DepartmentRepository"/> class.
            </summary>
            <param name="db">The stored procedure runner instance.</param>
        </member>
        <member name="M:DAL.DepartmentRepository.AddNewAsync(BMS.DTOs.DepartmentDTO)">
            <summary>
            Add Department Asynchronously.
            </summary>
            <param name="department">The department entity to add.</param>
            <returns>New Department ID.</returns>
        </member>
        <member name="M:DAL.DepartmentRepository.UpdateAsync(BMS.DTOs.DepartmentDTO)">
            <summary>
            Update Department Asynchronously.
            </summary>
            <param name="department">The department entity to add.</param>
            <returns>True if the department was updated successfully; false otherwise.</returns>
        </member>
        <member name="M:DAL.DepartmentRepository.GetAllAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get all department records asynchronously.
            </summary>
            <typeparam name="T">The type of the records to retrieve.</typeparam>
            <param name="PageNumber">The page number for pagination.</param>
            <param name="Records">The number of records per page.</param>
            <param name="FilterColumn">The column to filter by.</param>
            <param name="FilterValue">The value to filter by.</param>
            <returns>A list of department records.</returns>
        </member>
        <member name="M:DAL.DepartmentRepository.DeleteAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Soft delete a department asynchronously.
            </summary>
            <param name="departmentID">The ID of the department to delete.</param>
            <param name="UserID">The ID of the user performing the deletion.</param>
            <returns>True if the department was deleted successfully; false otherwise.</returns>
        </member>
        <member name="M:DAL.DepartmentRepository.GetInfoAsync(System.Int32)">
            <summary>
            Get a department by ID asynchronously.
            </summary>
            <typeparam name="T">The type of the record to retrieve.</typeparam>
            <param name="departmentID">The ID of the department to retrieve.</param>
            <returns>The department record.</returns>
        </member>
        <member name="M:DAL.DepartmentRepository.GetInfoAsync(System.String)">
            <summary>
            Get a department by name asynchronously.
            </summary>
            <typeparam name="T">The type of the record to retrieve.</typeparam>
            <param name="DepartmentName">The name of the department to retrieve.</param>
            <returns>The department record.</returns>
        </member>
        <member name="M:DAL.DepartmentRepository.GetNumberOfRecordsAsync(System.String)">
            <summary>
            Get the number of department records asynchronously.
            </summary>
            <param name="TableName">The name of the table to query.</param>
            <returns>The number of department records.</returns>
        </member>
        <member name="M:BMS.DAL.Interfaces.IRepository`1.AddNewAsync(`0)">
            <summary>
            Asynchronously adds a new entity to the underlying data store.
            </summary>
            <param name="entity">The entity to add. Cannot be null.</param>
            <returns>A task that represents the asynchronous operation. The task result is <see langword="true"/> if the entity
            was successfully added; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BMS.DAL.Interfaces.IRepository`1.DeleteAsync(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Asynchronously deletes an entity by its ID and optionally by the user ID.
            </summary>
            <param name="ID"></param>
            <param name="UserID"></param>
            <returns></returns>
        </member>
        <member name="M:BMS.DAL.Interfaces.IRepository`1.UpdateAsync(`0)">
            <summary>
            Updates the specified entity in the data store asynchronously.
            </summary>
            <param name="entity">The entity to update. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the update operation succeeds; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:BMS.DAL.Interfaces.IRepository`1.GetAllAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Asynchronously retrieves a paginated list of entities from the data store.
            </summary>
            <param name="PageNumber">The page number to retrieve. If null, retrieves the first page.</param>
            <param name="Records">The number of records per page. If null, retrieves 10 records.</param>
            <param name="FilterColumn">The column to filter by. If null, no filtering is applied.</param>
            <param name="FilterValue">The value to filter by. If null, no filtering is applied.</param>
            <returns>A task that represents the asynchronous operation. The task result is a list of entities.</returns>
        </member>
        <member name="M:BMS.DAL.Interfaces.IRepository`1.GetInfoAsync(System.Int32)">
            <summary>
            Asynchronously retrieves the information of an entity by its ID.
            </summary>
            <param name="ID">The ID of the entity to retrieve.</param>
            <returns>A task that represents the asynchronous operation. The task result is the entity information.</returns>
        </member>
        <member name="M:BMS.DAL.Interfaces.IRepository`1.GetInfoAsync(System.String)">
            <summary>
            Asynchronously retrieves the information of an entity by its title.
            </summary>
            <param name="Title">The title of the entity to retrieve.</param>
            <returns>A task that represents the asynchronous operation. The task result is the entity information.</returns>
        </member>
        <member name="M:BMS.DAL.Interfaces.IRepository`1.GetNumberOfRecordsAsync(System.String)">
            <summary>
            Asynchronously retrieves the number of records in a specified table.
            </summary>
            <param name="TableName">The name of the table to count records in.</param>
            <returns>A task that represents the asynchronous operation. The task result is the number of records.</returns>
        </member>
    </members>
</doc>
